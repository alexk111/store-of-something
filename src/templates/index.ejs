<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title><%= something.icon; %> | Store of <%= something.plural; %></title>
<style>
  .bitcoin_color {
    color: #FF9900;
  }
  .icon {
    font-size: 128px;
    line-height: 1;
    margin:0;
    position: relative;
  }
  body {
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    padding:32px;
    text-align:center;
  }
  h1 {
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size:40px;
    font-weight:800;
  }
  .main, .main select {
    font-size: 24px;
    line-height: 3;
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  .main select {
    font-weight:800;
  }
  select {
    border:4px solid #5c9e31;
    color: #5c9e31;
    cursor:pointer;
    opacity:0.8;
  }
  select.bitcoin_color {
    color: #FF9900;
    border-color: #FF9900;
  }
  select:hover {
    opacity:1;
  }
  a {
    color:#5c9e31;
    opacity:0.8;
  }
  a:hover {
    opacity:1;
  }
  .chart {
    margin: 32px 0;
  }
</style>
</head>

<body>
<header>
  <p class="icon"><%= something.icon; %></p>
  <h1>Store of <%= something.plural; %></h1>
</header>

<section class="main">
  Monetary value of <b>1 <%= something.singular; %></b> in

  <select class="sel_category">
    <% Object.getOwnPropertyNames(thingPrices).sort().forEach((category) => { %>
    <option value="<%= category %>"><%= category %></option>
    <% }) %>
  </select>

  in

  <select class="sel_year">
    <% for (let year = something.fromYear; year <= (new Date()).getFullYear(); year++) { %>
    <option value="<%= year %>"><%= year %></option>
    <% } %>
  </select>

  <b>stored in</b>

  <select class="sel_curr bitcoin_color">
    <option value="btc">Bitcoin</option>
    <option value="usd">USD</option>
    <% Object.getOwnPropertyNames(something.stores).forEach((curr) => { %>
      <option value="<%= curr %>"><%= something.stores[curr] %></option>
    <% }) %>
  </select>

  <br />

  now equals to <b><span class="thing_qty"></span> <%= something.plural; %></b>
</section>

<section class="chart">
	<canvas id="chart" width="500" height="400"></canvas>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js" integrity="sha256-t9UJPrESBeG2ojKTIcFLPGF7nHi2vEc7f5A2KpH/UBU=" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>

<%- `<script>var thingPrices=${JSON.stringify(thingPrices)};</script>`; %>
<%- `<script>var storePrices=${JSON.stringify(storePrices)};</script>`; %>

<script>
  /**
   * INIT DATA
   */
  var arrThingTimePrice = {};
  var arrStoreTimePrice = {};

  for (var category in thingPrices) {
    arrThingTimePrice[category] = new Map();
    for (var year in thingPrices[category]) {
      for (var month in thingPrices[category][year]) {
        for (var date in thingPrices[category][year][month]) {
          var d = new Date(year, month-1, date, 0,0,0,0);
          arrThingTimePrice[category].set(d.getTime(), thingPrices[category][year][month][date]);
        }
      }
    }
    arrThingTimePrice[category] = new Map([...arrThingTimePrice[category].entries()].sort(function(v1,v2) {
      return v1[0] - v2[0];
    }));
  }
  for (var curr in storePrices) {
    arrStoreTimePrice[curr] = new Map();
    for (var year in storePrices[curr]) {
      for (var month in storePrices[curr][year]) {
        for (var date in storePrices[curr][year][month]) {
          var d = new Date(year, month-1, date, 0,0,0,0);
          arrStoreTimePrice[curr].set(d.getTime(), storePrices[curr][year][month][date]);
        }
      }
    }
    arrStoreTimePrice[curr] = new Map([...arrStoreTimePrice[curr].entries()].sort(function(v1,v2) {
      return v1[0] - v2[0];
    }));
  }

  /**
   * INIT CHART
   */
  var ctx = document.getElementById('chart').getContext('2d');
  var chart = new Chart(ctx, {
    type: 'line',
    data: {
    },
    options: {
      elements: {
        point: {
          radius: 0
        },
        line: {
          tension: 0.1
        }
      },
      animation: false,
      responsive: true,
      maintainAspectRatio: false,
      legend: {
        display: false
      },
    }
  });

  var selCategory='';
	var selYear='';
  var selCurr='';
	$(function () {
		$('.sel_category').on('change', function() {
      updateChart();
    });
		$('.sel_year').on('change', function() {
      updateChart();
    });
		$('.sel_curr').on('change', function() {
      updateChart();
      updateSelCurr();
    });

		updateChart();
    updateSelCurr();
	});

  /**
   * FUNCTIONS
   */
  function timestampToYYYYMMDD(ts) {
    return new Date(ts).toISOString().slice(0,10);
  }
  function updateSelCurr() {
    if (selCurr==='btc') {
      $('.sel_curr').addClass('bitcoin_color');
    } else {
      $('.sel_curr').removeClass('bitcoin_color');
    }
  }

  function updateChart() {
    selCategory=$('.sel_category').val();
		selYear=$('.sel_year').val();
    selCurr=$('.sel_curr').val();

    const data = {
      labels: [],
      datasets: []
    };

    // for (var [key, value] of arrStoreTimePrice['btc']) {
    //   if (!arrStoreTimePrice['xau'].has(key)) {
    //     console.log(key + ' = ' + value);
    //   }
    // }


    chart.data = data;
		chart.update();
  }
</script>

<p>
  Updated on <%= new Date().toISOString().slice(0,10); %>
</p>
</body>
</html>